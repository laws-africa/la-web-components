/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TOCItem } from "./components/table-of-contents/table-of-contents";
import { TOCItem as TOCItem1 } from "./components/table-of-contents/table-of-contents";
export namespace Components {
    interface LaAkomaNtoso {
    }
    interface LaDecorateInternalRefs {
        /**
          * CSS selector for the la-akoma-ntoso element that will be decorated. Defaults to the containing la-akoma-ntoso element, if any, otherwise the first `la-akoma-ntoso` element on the page.
         */
        "akomaNtoso"?: string;
        /**
          * If `true`, internal refs will be flagged with in icon to be more visible.
         */
        "flag": boolean;
        /**
          * If `true`, the content of internal ref targets will be shown as popups.
         */
        "popups": boolean;
    }
    interface LaDecorateTerms {
        /**
          * CSS selector for the la-akoma-ntoso element that will be decorated. Defaults to the containing la-akoma-ntoso element, if any, otherwise the first `la-akoma-ntoso` element on the page.
         */
        "akomaNtoso"?: string;
        /**
          * If `true`, terms will be changed to `<a>` elements that jump to the term definition.
         */
        "linkTerms": boolean;
        /**
          * If `true`, the definitions of terms will be shown as popups.
         */
        "popupDefinitions": boolean;
    }
    interface LaGutter {
        /**
          * CSS selector for the la-akoma-ntoso element that will be decorated. Defaults to the containing la-akoma-ntoso element, if any, otherwise the first `la-akoma-ntoso` element on the page.
         */
        "akomaNtoso"?: string;
        /**
          * Layout the gutter items.
         */
        "layoutItems": () => Promise<void>;
    }
    interface LaGutterItem {
        /**
          * Indicates that this is the active item in the gutter. Only one item can be active at a time.
         */
        "active": boolean;
        /**
          * CSS selector for the anchor element in the enclosing gutter's `<la-akoma-ntoso>` element.
         */
        "anchor"?: string;
    }
    interface LaTableOfContents {
        /**
          * Collapses all items
         */
        "collapseAll": () => Promise<void>;
        /**
          * Expands all items
         */
        "expandAll": () => Promise<void>;
        /**
          * An array of items used to build the table of contents. Each item must have a `title` attribute (which may be `null`), and a `children` attribute (which may be `null`).
         */
        "items": TOCItem[];
        /**
          * value to filter items by item title
         */
        "titleFilter": string;
        /**
          * Additional CSS classes added to the expand/collapse button of a `la-toc-item`
         */
        "toggleButtonClasses": string;
    }
    interface LaTableOfContentsController {
        /**
          * Additional CSS classes added to the clear button
         */
        "clearButtonClasses": string;
        /**
          * Additional classes added to Collapse all button
         */
        "collapseAllBtnClasses": string;
        /**
          * Additional classes added to Expand all button
         */
        "expandAllBtnClasses": string;
        /**
          * An array of items used to build the table of contents. Each item must have a `title` attribute (which may be `null`), and a `children` attribute (which may be `null`).
         */
        "items": TOCItem[];
        /**
          * Placeholder for search title filter
         */
        "titleFilterPlaceholder": string;
        /**
          * Additional CSS classes added to the expand/collapse button of a `la-toc-item`
         */
        "toggleButtonClasses": string;
    }
    interface LaTocItem {
        /**
          * HTML displayed after item title
         */
        "appendHtml": string;
        /**
          * HTML displayed in toggle button when item is not expanded
         */
        "collapseIconHtml": string;
        /**
          * HTML displayed in toggle button when item is expanded
         */
        "expandIconHtml": string;
        /**
          * If true, `item` `children`, and the collapsed icon are shown but expanded icon is hidden. If false, the `item` `children` and collapsed icon are hidden but the expanded icon is show
         */
        "expanded": boolean;
        /**
          * Array of items filtered by titleQuery used in la-toc-item to determine with item is shown or not
         */
        "filteredItems": Set<TOCItem> | null;
        /**
          * Item used to build the table of contents
         */
        "item": TOCItem;
        /**
          * HTML displayed before item title
         */
        "prependHtml": string;
        /**
          * Additional CSS classes added to the expand/collapse button
         */
        "toggleButtonClasses": string;
    }
}
declare global {
    interface HTMLLaAkomaNtosoElement extends Components.LaAkomaNtoso, HTMLStencilElement {
    }
    var HTMLLaAkomaNtosoElement: {
        prototype: HTMLLaAkomaNtosoElement;
        new (): HTMLLaAkomaNtosoElement;
    };
    interface HTMLLaDecorateInternalRefsElement extends Components.LaDecorateInternalRefs, HTMLStencilElement {
    }
    var HTMLLaDecorateInternalRefsElement: {
        prototype: HTMLLaDecorateInternalRefsElement;
        new (): HTMLLaDecorateInternalRefsElement;
    };
    interface HTMLLaDecorateTermsElement extends Components.LaDecorateTerms, HTMLStencilElement {
    }
    var HTMLLaDecorateTermsElement: {
        prototype: HTMLLaDecorateTermsElement;
        new (): HTMLLaDecorateTermsElement;
    };
    interface HTMLLaGutterElement extends Components.LaGutter, HTMLStencilElement {
    }
    var HTMLLaGutterElement: {
        prototype: HTMLLaGutterElement;
        new (): HTMLLaGutterElement;
    };
    interface HTMLLaGutterItemElement extends Components.LaGutterItem, HTMLStencilElement {
    }
    var HTMLLaGutterItemElement: {
        prototype: HTMLLaGutterItemElement;
        new (): HTMLLaGutterItemElement;
    };
    interface HTMLLaTableOfContentsElement extends Components.LaTableOfContents, HTMLStencilElement {
    }
    var HTMLLaTableOfContentsElement: {
        prototype: HTMLLaTableOfContentsElement;
        new (): HTMLLaTableOfContentsElement;
    };
    interface HTMLLaTableOfContentsControllerElement extends Components.LaTableOfContentsController, HTMLStencilElement {
    }
    var HTMLLaTableOfContentsControllerElement: {
        prototype: HTMLLaTableOfContentsControllerElement;
        new (): HTMLLaTableOfContentsControllerElement;
    };
    interface HTMLLaTocItemElement extends Components.LaTocItem, HTMLStencilElement {
    }
    var HTMLLaTocItemElement: {
        prototype: HTMLLaTocItemElement;
        new (): HTMLLaTocItemElement;
    };
    interface HTMLElementTagNameMap {
        "la-akoma-ntoso": HTMLLaAkomaNtosoElement;
        "la-decorate-internal-refs": HTMLLaDecorateInternalRefsElement;
        "la-decorate-terms": HTMLLaDecorateTermsElement;
        "la-gutter": HTMLLaGutterElement;
        "la-gutter-item": HTMLLaGutterItemElement;
        "la-table-of-contents": HTMLLaTableOfContentsElement;
        "la-table-of-contents-controller": HTMLLaTableOfContentsControllerElement;
        "la-toc-item": HTMLLaTocItemElement;
    }
}
declare namespace LocalJSX {
    interface LaAkomaNtoso {
    }
    interface LaDecorateInternalRefs {
        /**
          * CSS selector for the la-akoma-ntoso element that will be decorated. Defaults to the containing la-akoma-ntoso element, if any, otherwise the first `la-akoma-ntoso` element on the page.
         */
        "akomaNtoso"?: string;
        /**
          * If `true`, internal refs will be flagged with in icon to be more visible.
         */
        "flag"?: boolean;
        /**
          * If `true`, the content of internal ref targets will be shown as popups.
         */
        "popups"?: boolean;
    }
    interface LaDecorateTerms {
        /**
          * CSS selector for the la-akoma-ntoso element that will be decorated. Defaults to the containing la-akoma-ntoso element, if any, otherwise the first `la-akoma-ntoso` element on the page.
         */
        "akomaNtoso"?: string;
        /**
          * If `true`, terms will be changed to `<a>` elements that jump to the term definition.
         */
        "linkTerms"?: boolean;
        /**
          * If `true`, the definitions of terms will be shown as popups.
         */
        "popupDefinitions"?: boolean;
    }
    interface LaGutter {
        /**
          * CSS selector for the la-akoma-ntoso element that will be decorated. Defaults to the containing la-akoma-ntoso element, if any, otherwise the first `la-akoma-ntoso` element on the page.
         */
        "akomaNtoso"?: string;
    }
    interface LaGutterItem {
        /**
          * Indicates that this is the active item in the gutter. Only one item can be active at a time.
         */
        "active"?: boolean;
        /**
          * CSS selector for the anchor element in the enclosing gutter's `<la-akoma-ntoso>` element.
         */
        "anchor"?: string;
        /**
          * Event emitted when the state (`active`) of the item changes. Used by `la-gutter` to re-layout its items.
         */
        "onLaItemChanged"?: (event: CustomEvent<void>) => void;
    }
    interface LaTableOfContents {
        /**
          * An array of items used to build the table of contents. Each item must have a `title` attribute (which may be `null`), and a `children` attribute (which may be `null`).
         */
        "items"?: TOCItem[];
        /**
          * value to filter items by item title
         */
        "titleFilter"?: string;
        /**
          * Additional CSS classes added to the expand/collapse button of a `la-toc-item`
         */
        "toggleButtonClasses"?: string;
    }
    interface LaTableOfContentsController {
        /**
          * Additional CSS classes added to the clear button
         */
        "clearButtonClasses"?: string;
        /**
          * Additional classes added to Collapse all button
         */
        "collapseAllBtnClasses"?: string;
        /**
          * Additional classes added to Expand all button
         */
        "expandAllBtnClasses"?: string;
        /**
          * An array of items used to build the table of contents. Each item must have a `title` attribute (which may be `null`), and a `children` attribute (which may be `null`).
         */
        "items"?: TOCItem[];
        /**
          * Placeholder for search title filter
         */
        "titleFilterPlaceholder"?: string;
        /**
          * Additional CSS classes added to the expand/collapse button of a `la-toc-item`
         */
        "toggleButtonClasses"?: string;
    }
    interface LaTocItem {
        /**
          * HTML displayed after item title
         */
        "appendHtml"?: string;
        /**
          * HTML displayed in toggle button when item is not expanded
         */
        "collapseIconHtml"?: string;
        /**
          * HTML displayed in toggle button when item is expanded
         */
        "expandIconHtml"?: string;
        /**
          * If true, `item` `children`, and the collapsed icon are shown but expanded icon is hidden. If false, the `item` `children` and collapsed icon are hidden but the expanded icon is show
         */
        "expanded"?: boolean;
        /**
          * Array of items filtered by titleQuery used in la-toc-item to determine with item is shown or not
         */
        "filteredItems"?: Set<TOCItem> | null;
        /**
          * Item used to build the table of contents
         */
        "item"?: TOCItem;
        /**
          * HTML displayed before item title
         */
        "prependHtml"?: string;
        /**
          * Additional CSS classes added to the expand/collapse button
         */
        "toggleButtonClasses"?: string;
    }
    interface IntrinsicElements {
        "la-akoma-ntoso": LaAkomaNtoso;
        "la-decorate-internal-refs": LaDecorateInternalRefs;
        "la-decorate-terms": LaDecorateTerms;
        "la-gutter": LaGutter;
        "la-gutter-item": LaGutterItem;
        "la-table-of-contents": LaTableOfContents;
        "la-table-of-contents-controller": LaTableOfContentsController;
        "la-toc-item": LaTocItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "la-akoma-ntoso": LocalJSX.LaAkomaNtoso & JSXBase.HTMLAttributes<HTMLLaAkomaNtosoElement>;
            "la-decorate-internal-refs": LocalJSX.LaDecorateInternalRefs & JSXBase.HTMLAttributes<HTMLLaDecorateInternalRefsElement>;
            "la-decorate-terms": LocalJSX.LaDecorateTerms & JSXBase.HTMLAttributes<HTMLLaDecorateTermsElement>;
            "la-gutter": LocalJSX.LaGutter & JSXBase.HTMLAttributes<HTMLLaGutterElement>;
            "la-gutter-item": LocalJSX.LaGutterItem & JSXBase.HTMLAttributes<HTMLLaGutterItemElement>;
            "la-table-of-contents": LocalJSX.LaTableOfContents & JSXBase.HTMLAttributes<HTMLLaTableOfContentsElement>;
            "la-table-of-contents-controller": LocalJSX.LaTableOfContentsController & JSXBase.HTMLAttributes<HTMLLaTableOfContentsControllerElement>;
            "la-toc-item": LocalJSX.LaTocItem & JSXBase.HTMLAttributes<HTMLLaTocItemElement>;
        }
    }
}
